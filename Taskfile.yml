# https://taskfile.dev

version: "3"

dotenv: [".env.task"]

vars:
  # This is wonky because both Taskfile and docker stats use Go text/template
  # {{`{{`}} is to produce a "{{" literal that will make it to docker stats
  DOCKER_STATS_FORMAT: "table {{`{{`}}.Name{{`}}`}}\t{{`{{`}}.Container{{`}}`}}\t{{`{{`}}.CPUPerc{{`}}`}}\t{{`{{`}}.MemUsage{{`}}`}}\t{{`{{`}}.MemPerc{{`}}`}}"

tasks:
  format:
    desc: "Format all backend and frontend code"
    cmds:
      - ./vendor/bin/pint
      - npm run format

  dev:docker:build:
    desc: "Builds the image containing Frankenphp and the Laravel app"
    cmd: docker builder build -t davidhartingdotcom:latest -f Dockerfile .

  dev:docker:up:
    desc: "Bring up all services with docker-compose using development configuration"
    cmd: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d
    deps:
      - dev:docker:down
      - dev:docker:build

  dev:docker:down:
    desc: "Bring down all docker-compose services"
    cmd: docker-compose down -v

  docker:stats:
    desc: "Monitor CPU and memory usage of docker-compose services"
    cmd: docker stats --no-stream --format '{{.DOCKER_STATS_FORMAT}}'

  prod:build:
    desc: "Build docker image for production deployment"
    vars:
      TAG: '{{.TAG | default "latest"}}'
      IMAGE_NAME: "davidhartingdotcom:{{.TAG}}"
      TAR_FILE: "davidhartingdotcom-{{.TAG}}.tar"
    cmds:
      - echo "Building image {{.IMAGE_NAME}} for linux/amd64..."
      - docker buildx build --platform linux/amd64 -t {{.IMAGE_NAME}} -f Dockerfile .
      - echo "Saving image to {{.TAR_FILE}}..."
      - docker save --output {{.TAR_FILE}} {{.IMAGE_NAME}}
      - echo "Build complete! Tar file saved as {{.TAR_FILE}}"

  prod:deploy:
    desc: "Upload and deploy docker image to production server"
    vars:
      TAG: '{{.TAG | default "latest"}}'
      TAR_FILE: "davidhartingdotcom-{{.TAG}}.tar"
    deps:
      - prod:build
    cmds:
      - echo "Uploading {{.TAR_FILE}} to production server..."
      - scp -C -P $SSH_PORT {{.TAR_FILE}} $SSH_USER@$SSH_HOST:/home/$SSH_USER/docker/
      - echo "Loading image on production server..."
      - ssh -p $SSH_PORT $SSH_USER@$SSH_HOST "docker load --input /home/$SSH_USER/docker/{{.TAR_FILE}}"
      - echo "Deploying on production server..."
      - ssh -p $SSH_PORT $SSH_USER@$SSH_HOST "docker compose -f /home/$SSH_USER/repos/davidharting.com/docker-compose.yml up -d"
      - echo "Cleaning up local tar file..."
      - rm {{.TAR_FILE}}
      - echo "Deploy complete!"
